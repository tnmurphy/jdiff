#!/usr/bin/env python3
""" Print out a diff of two json structures to show  which elements are missing. Not sensitive to list differences"""
import sys,os
import json
import re


def dodiff(jsona, jsonb, label="", indent=" "):
    """ recursively find differences assuming the root is a dict"""
    a_keys = set(jsona.keys())
    b_keys = set(jsonb.keys())

    output = ""
    a_diff_keys = sorted(a_keys.difference(b_keys))
    if len(a_diff_keys) > 0:
        for k in a_diff_keys:
            output += f">{indent}{k}: {jsona[k]}\n"

    b_diff_keys = sorted(b_keys.difference(a_keys))
    if len(b_diff_keys) > 0:
        for k in b_diff_keys:
            output += f"<{indent}{k}: {jsonb[k]}\n"


    intersection_keys = sorted(a_keys.intersection(b_keys))
    for k in intersection_keys:
        t = type(jsona[k])
        if isinstance(jsona[k], dict):
            dodiff(jsona[k], jsonb[k], k, indent + "  ")
        elif jsona[k] != jsonb[k]:
            output += f"-{indent}{k}: {jsona[k]}\n"
            output += f"+{indent}{k}: {jsonb[k]}\n"

    # Only show a label and the diff if there really is a diff
    if len(output) > 0:
        path_indent=(" " * (len(indent)-1)) + "-"
        print(f"{path_indent}{label}")
        sys.stdout.write(output)


def file_diff(files):
    """Diff json files"""

    json_items = []
    for f in files:
        with open(f, "r") as fa:
            try:
                json_items.append(json.load(fa))
            except json.decoder.JSONDecodeError as e:
                sys.stderr.write(f"Error processing {f}: {e}\n")
                sys.exit(1)

    for fileb in json_items[1:]:
        dodiff(json_items[0],fileb)

def line_diff():
    """Find first bit of json in one line, diff all successive ones to it"""
    jsre = re.compile(".*?({.*}).*?")
    js=[]
    jsona_s=None
    for l in sys.stdin:
        m = jsre.match(l)
        if m is not None:
            print(f"Groups={m.groups()}")
            if jsona_s is None:
                jsona_s = m.groups()[0]
            else:
                jsonb_s = m.groups()[0]

                jsona = json.loads(jsona_s)
                jsonb = json.loads(jsonb_s)
                dodiff(jsona, jsonb)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="compare json files or strings")
    parser.add_argument("files", metavar="Files", nargs='*', 
             help="files to compare. Changes listed from the first to each of the others")
    parser.add_argument("-l", action="store_true", 
             help="line mode - look for the first 2 complete json strings in the standard input and compare them")
    args = parser.parse_args()

    if args.l:
        line_diff()
    elif len(args.files) < 3:
        file_diff(args.files)
    else:
        sys.stderr.write("jdiff either needs 2 files or the -l option for line mode\n")
        sys.exit(1)

